<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--使用spring来创建我们的对象 在spring里面的这些都称为bean-->


    <bean id="address" class="dell.eduucy.Address" scope="singleton" p:address="江苏省常州市">

<!--        scope默认是单例模式-->
<!--        <property name="address" value="江苏省"/>-->
    </bean>


    <bean id="student" class="dell.eduucy.Student" scope="prototype">
        <!--    第一种普通纸注入直接使用value就好了-->
        <property name="name" value="陈亚"/>

<!--        第二种使用bean注入 使用ref-->
        <property name="address" ref="address"/>

        <property name="book">
            <array>
                <value>红楼梦</value>
                <value>水浒传</value>
                <value>西游记</value>
                <value>三国演义</value>
            </array>
        </property>

        <property name="hobbys" >
            <list>
                <value>跳舞</value>
                <value>唱歌</value>
                <value>rap</value>
                <value>篮球</value>
            </list>
        </property>

        <property name="stuCard">
            <map>
                <entry key="1" value="陈亚"/>
                <entry key ="2" value="马静娴"/>
            </map>
        </property>

        <property name="games">
            <set>
                <value>陈亚</value>
                <value>马静娴</value>
                <value>华妍</value>
            </set>
        </property>

        <property name="info">
            <props>
                <prop key="1">你是猪吗</prop>
                <prop key="2">你是狗吗</prop>
                <prop key="3">你是个垃圾</prop>
                <prop key="4">你就是只猪</prop>
            </props>
        </property>


        <property name="wife">
            <null></null>
        </property>
    </bean>


    <bean id="customer" class="dell.eduucy.Customer">
<!--        <constructor-arg >-->
<!--            <value>陈亚你是狗吗</value>-->
<!--        </constructor-arg>-->

        <constructor-arg type="int">
            <value>22</value>
        </constructor-arg>

    </bean>


<!--    <bean id="conn" class="dell.factoryBean.ConnectionBeanFactory">-->
<!--        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
<!--        <property name="url" value="jdbc:mysql://localhost:3307/easy_mybatis?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=CTT"/>-->
<!--        <property name="name" value="root"/>-->
<!--        <property name="password" value="123456"/>-->
<!--    </bean>-->

<!--    如果Class中指定的类型是FactoryBean接口的实现类 那么通过id获得的是这个类所创建的复杂对象  此处就是Connection对象-->
<!--    <bean id="conn" class="dell.factoryBean.ConnectionBeanFactory"/>-->

<!--    <bean id="connFactory" class="dell.factoryBean.ConnFactory"/>-->
<!--    <bean id="conn" factory-bean="connFactory" factory-method="getConnection"/>    实例工厂-->

    <bean id="conn" class="dell.factoryBean.StaticFactory" factory-method="getConnection"/>

    <bean id="account" scope="singleton" class="dell.scope.Account" lazy-init="true"/>
<!--    scope="singleton"表示简单对象只会创建一次 如果既想要singleton又想要在获取对象的时候才创建 可以在上述加上lazy-inin懒初始化属性 并将其设置为true-->

<!--    控制简单对象创建的次数只需要在scope属性中指定即可 控制复杂对象创建的次数如果是FactoryBean接口的实现类只需要在实现的issingleton()方法中指定参数是true还是false即可-->
<!--    要是实例工厂和静态工厂的话还是一样的通过scope属性来控制-->

<!--    <bean id="product"  class="dell.life.Product"/>-->

    <bean id="product" class="dell.life.Product" init-method="myInit"/>
</beans>