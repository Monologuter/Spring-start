<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userService" class="springProxy.UserServiceImpl"/>
    <bean id="orderService" class="springProxy.OrderServiceImpl"/>
    <bean id="before" class="dynamic.Before"/>
    <bean id="beforeNew" class="dynamic.BeforeNew"/>
    <bean id="arround" class="dynamic.Around"/>


<!--切入点表达式详解-->
<!--    public void add(int a , int b)-->
<!--    *            * (..)-->
<!--    第一个*代表的是修饰符-->
<!--    第二个*代表的是方法名-->
<!--    ()代表的是参数列表  点点代表的是对于参数没有要求  参数是什么类型都可以-->

<!--    <aop:config>-->
<!--&lt;!&ndash;    execution(* *(..))    所有的方法都作为切入点&ndash;&gt;-->
<!--        <aop:pointcut id="pc" expression="execution(* *(..))"/>-->
<!--        -->

<!--&lt;!&ndash;        组装&ndash;&gt;-->
<!--        <aop:advisor advice-ref="before" pointcut-ref="pc"/>-->
<!--    </aop:config>-->


<!--    <aop:config>-->
<!--        <aop:pointcut id="pcnew" expression="execution(* *(..))"/>-->
<!--        <aop:advisor advice-ref="beforeNew" pointcut-ref="pcnew"/>-->
<!--    </aop:config>-->


    <aop:config>
<!--        定义所有方法为切入点-->
<!--        <aop:pointcut id="pc2" expression="execution(* *(..))"/>-->

<!--        只定义login方法为切入点-->
<!--        <aop:pointcut id="pc2" expression="execution(* login(..))"/>-->

<!--        只定义login方法且有一个字符串类型的参数作为切入点
            注意事项：不是java.lang包下面的类型必须要写全限定名 比如User类型就要写成 java.springProxy.User

-->
<!--        <aop:pointcut id="pc2" expression="execution(* login( String))"/>-->
<!--        切入点的逻辑运算  execution 和 args配合运算
            注意事项：与运算不能是同种类型的切入点函数
            execution 和  execution 是不可以放在一起进行与运算的
-->
<!--            <aop:pointcut id="pc" expression="execution(* login(..)) and args(String,String)"/>-->
<!--        方法运算or操作-->
            <aop:pointcut id="pc" expression="execution(* login(..)) and execution(* register(..))"/>


<!--        (String , ..)表示第一个参数只要是String类型的就好了 后面的没有要求-->
<!--        <aop:pointcut id="pc2" expression="execution(* login( String,..))"/>-->

<!--        注意事项：上面所讲的表达式不精准
            分析：可能同一个含有相同参数的方法的类在不同的包中都含有 而且都在配置文件中注册了 如果再使用这种方式进行匹配就不准确了  需要使用方法的全限定名

-->

<!--        精准方法切入点限定：使用方法的全限定名-->
<!--        <aop:pointcut id="pc2" expression="execution(*  springProxy.UserServiceImpl.login( String,..))"/>-->




<!--        类切入点-->
<!--        <aop:pointcut id="pc2" expression="execution(*  springProxy.UserServiceImpl.login(String,..))"/>-->
<!--        将指定类所有的功能都作为切面

            注意事项：
                1、类中的所有方法都加上额外的功能：springProxy.UserServiceImpl.*(..))
                2、忽略包：类中只存在一级包的时候* *.UserServiceImpl.*(..)
                         但是当类中存在多级包的时候 这个时候上述的方式就不行了 需要忽略包  具体的语法是 * *..UserServiceImpl.*(..)
-->
<!--        <aop:pointcut id="pc2" expression="execution(*  springProxy.UserServiceImpl.*(..))"/>-->



<!--        包切入点：将指定包中的所有方法都作为切入点加入新的功能  springProxy包中的所有的类所有的方法 -->
<!--        <aop:pointcut id="pc2" expression="execution(*  springProxy.*.*(..))"/>-->


<!--        包切入点函数args-->
<!--        <aop:pointcut id="pc" expression="args(String,String)"/>-->



<!--        <aop:pointcut id="pc" expression="within(*..UserServiceImpl)"/>-->
<!--        <aop:pointcut id="pc" expression="within(springProxy..*)"/>-->





<!--        <aop:pointcut id="pc"  expression="@annotation(Log.Log)"/>-->


        <aop:advisor advice-ref="arround" pointcut-ref="pc"/>

    </aop:config>

</beans>